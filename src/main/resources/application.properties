# Logging
logging.level.org.springframework.web= INFO

#logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx
logging.pattern.console=%clr(%d{HH:mm:ss.SSS}){faint} %clr([%5p]) %clr(%-80.80(%logger{30}:%class{0}.%method:%L)){cyan} %clr(:){faint} %m%n%wEx
#logging.pattern.console=%d{HH:mm:ss.SSS} [%-5p] %class{0}.%method:%L - %m%n

# color log
spring.output.ansi.enabled=ALWAYS

# Database (see cayenne-project.xml) 
#spring.database.driverClassName= org.postgresql.Driver
#spring.datasource.url= jdbc:postgresql://localhost:5432/test
#spring.datasource.username= postgres
#spring.datasource.password= postgres

# Primefaces
jsf.primefaces.theme= admin
jsf.primeface.moveScriptsToBottom= true
jsf.primefaces.FONT_AWESOME=true

# config
#server.address=127.0.0.1
server.port=${PORT:9090}
server.servlet.context-path= /
server.compression.enabled=false
server.context-path=/ 
server.display-name=application 
server.error.include-stacktrace=never
server.error.path=includes/error.xhtml
server.error.whitelabel.enabled=false
server.server-header= 
server.servlet-path=/
#spring.mvc.throw-exception-if-no-handler-found=false

# SSL
server.compression.enabled=true
server.ssl.key-store=classpath:keystore.jks
server.ssl.key-store-password=secret
server.ssl.key-password=secret
server.ssl.protocol: TLSv1.2

# HTTP2
server.http2.enabled=true
server.http2.alpnDebug=true

# FLYWAY (Migrations) TODO
flyway.baseline-description= #
flyway.baseline-version=1 # version to start migration
flyway.baseline-on-migrate= #
flyway.check-location=false # Check that migration scripts location exists.
flyway.clean-on-validation-error= #
flyway.enabled=false # Enable flyway.
flyway.encoding= #
flyway.ignore-failed-future-migration= #
flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.
flyway.locations=classpath:db/migration # locations of migrations scripts
flyway.out-of-order= #
flyway.password= # JDBC password if you want Flyway to create its own DataSource
flyway.placeholder-prefix= #
flyway.placeholder-replacement= #
flyway.placeholder-suffix= #
flyway.placeholders.*= #
flyway.schemas= # schemas to update
flyway.sql-migration-prefix=V #
flyway.sql-migration-separator= #
flyway.sql-migration-suffix=.sql #
flyway.table= #
flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.
flyway.user= # Login user of the database to migrate.
flyway.validate-on-migrate= #