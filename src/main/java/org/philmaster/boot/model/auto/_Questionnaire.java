package org.philmaster.boot.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.philmaster.boot.model.Account;
import org.philmaster.boot.model.Client;

/**
 * Class _Questionnaire was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Questionnaire extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String QUESTIONNAIRE_ID_PK_COLUMN = "questionnaire_id";

    public static final Property<BigDecimal> AGE = Property.create("age", BigDecimal.class);
    public static final Property<Boolean> FEELING = Property.create("feeling", Boolean.class);
    public static final Property<Boolean> HOBBY = Property.create("hobby", Boolean.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Boolean> PROGRAMMING = Property.create("programming", Boolean.class);
    public static final Property<Integer> VERSION = Property.create("version", Integer.class);
    public static final Property<Account> ACCOUNT = Property.create("account", Account.class);
    public static final Property<Client> CLIENT = Property.create("client", Client.class);

    protected BigDecimal age;
    protected Boolean feeling;
    protected Boolean hobby;
    protected String name;
    protected Boolean programming;
    protected Integer version;

    protected Object account;
    protected Object client;

    public void setAge(BigDecimal age) {
        beforePropertyWrite("age", this.age, age);
        this.age = age;
    }

    public BigDecimal getAge() {
        beforePropertyRead("age");
        return this.age;
    }

    public void setFeeling(boolean feeling) {
        beforePropertyWrite("feeling", this.feeling, feeling);
        this.feeling = feeling;
    }

	public boolean isFeeling() {
        beforePropertyRead("feeling");
        if(this.feeling == null) {
            return false;
        }
        return this.feeling;
    }

    public void setHobby(boolean hobby) {
        beforePropertyWrite("hobby", this.hobby, hobby);
        this.hobby = hobby;
    }

	public boolean isHobby() {
        beforePropertyRead("hobby");
        if(this.hobby == null) {
            return false;
        }
        return this.hobby;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setProgramming(boolean programming) {
        beforePropertyWrite("programming", this.programming, programming);
        this.programming = programming;
    }

	public boolean isProgramming() {
        beforePropertyRead("programming");
        if(this.programming == null) {
            return false;
        }
        return this.programming;
    }

    public void setVersion(int version) {
        beforePropertyWrite("version", this.version, version);
        this.version = version;
    }

    public int getVersion() {
        beforePropertyRead("version");
        if(this.version == null) {
            return 0;
        }
        return this.version;
    }

    public void setAccount(Account account) {
        setToOneTarget("account", account, true);
    }

    public Account getAccount() {
        return (Account)readProperty("account");
    }

    public void setClient(Client client) {
        setToOneTarget("client", client, true);
    }

    public Client getClient() {
        return (Client)readProperty("client");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "age":
                return this.age;
            case "feeling":
                return this.feeling;
            case "hobby":
                return this.hobby;
            case "name":
                return this.name;
            case "programming":
                return this.programming;
            case "version":
                return this.version;
            case "account":
                return this.account;
            case "client":
                return this.client;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "age":
                this.age = (BigDecimal)val;
                break;
            case "feeling":
                this.feeling = (Boolean)val;
                break;
            case "hobby":
                this.hobby = (Boolean)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "programming":
                this.programming = (Boolean)val;
                break;
            case "version":
                this.version = (Integer)val;
                break;
            case "account":
                this.account = val;
                break;
            case "client":
                this.client = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.age);
        out.writeObject(this.feeling);
        out.writeObject(this.hobby);
        out.writeObject(this.name);
        out.writeObject(this.programming);
        out.writeObject(this.version);
        out.writeObject(this.account);
        out.writeObject(this.client);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.age = (BigDecimal)in.readObject();
        this.feeling = (Boolean)in.readObject();
        this.hobby = (Boolean)in.readObject();
        this.name = (String)in.readObject();
        this.programming = (Boolean)in.readObject();
        this.version = (Integer)in.readObject();
        this.account = in.readObject();
        this.client = in.readObject();
    }

}
