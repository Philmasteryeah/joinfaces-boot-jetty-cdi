package org.philmaster.boot.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Account was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Account extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> GENDER = Property.create("gender", Integer.class);
    public static final Property<String> NAME_FIRST = Property.create("nameFirst", String.class);
    public static final Property<String> NAME_LAST = Property.create("nameLast", String.class);
    public static final Property<String> TITLE = Property.create("title", String.class);

    protected Integer gender;
    protected String nameFirst;
    protected String nameLast;
    protected String title;


    public void setGender(int gender) {
        beforePropertyWrite("gender", this.gender, gender);
        this.gender = gender;
    }

    public int getGender() {
        beforePropertyRead("gender");
        if(this.gender == null) {
            return 0;
        }
        return this.gender;
    }

    public void setNameFirst(String nameFirst) {
        beforePropertyWrite("nameFirst", this.nameFirst, nameFirst);
        this.nameFirst = nameFirst;
    }

    public String getNameFirst() {
        beforePropertyRead("nameFirst");
        return this.nameFirst;
    }

    public void setNameLast(String nameLast) {
        beforePropertyWrite("nameLast", this.nameLast, nameLast);
        this.nameLast = nameLast;
    }

    public String getNameLast() {
        beforePropertyRead("nameLast");
        return this.nameLast;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "gender":
                return this.gender;
            case "nameFirst":
                return this.nameFirst;
            case "nameLast":
                return this.nameLast;
            case "title":
                return this.title;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "gender":
                this.gender = (Integer)val;
                break;
            case "nameFirst":
                this.nameFirst = (String)val;
                break;
            case "nameLast":
                this.nameLast = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.gender);
        out.writeObject(this.nameFirst);
        out.writeObject(this.nameLast);
        out.writeObject(this.title);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.gender = (Integer)in.readObject();
        this.nameFirst = (String)in.readObject();
        this.nameLast = (String)in.readObject();
        this.title = (String)in.readObject();
    }

}
