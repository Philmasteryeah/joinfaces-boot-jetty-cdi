package org.philmaster.boot.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.philmaster.boot.model.Account;
import org.philmaster.boot.model.Client;
import org.philmaster.boot.model.Privilege;

/**
 * Class _Role was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Role extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ROLE_ID_PK_COLUMN = "role_id";

    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<List<Account>> ACCOUNTS = Property.create("accounts", List.class);
    public static final Property<Client> CLIENT = Property.create("client", Client.class);
    public static final Property<List<Privilege>> PRIVILEGES = Property.create("privileges", List.class);

    protected String name;

    protected Object accounts;
    protected Object client;
    protected Object privileges;

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToAccounts(Account obj) {
        addToManyTarget("accounts", obj, true);
    }

    public void removeFromAccounts(Account obj) {
        removeToManyTarget("accounts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Account> getAccounts() {
        return (List<Account>)readProperty("accounts");
    }

    public void setClient(Client client) {
        setToOneTarget("client", client, true);
    }

    public Client getClient() {
        return (Client)readProperty("client");
    }

    public void addToPrivileges(Privilege obj) {
        addToManyTarget("privileges", obj, true);
    }

    public void removeFromPrivileges(Privilege obj) {
        removeToManyTarget("privileges", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Privilege> getPrivileges() {
        return (List<Privilege>)readProperty("privileges");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "name":
                return this.name;
            case "accounts":
                return this.accounts;
            case "client":
                return this.client;
            case "privileges":
                return this.privileges;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "name":
                this.name = (String)val;
                break;
            case "accounts":
                this.accounts = val;
                break;
            case "client":
                this.client = val;
                break;
            case "privileges":
                this.privileges = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.name);
        out.writeObject(this.accounts);
        out.writeObject(this.client);
        out.writeObject(this.privileges);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.name = (String)in.readObject();
        this.accounts = in.readObject();
        this.client = in.readObject();
        this.privileges = in.readObject();
    }

}
