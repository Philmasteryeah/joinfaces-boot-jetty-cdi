package org.philmaster.boot.service;

import java.util.List;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Named;
import javax.sql.DataSource;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.ObjectContext;
import org.apache.cayenne.configuration.server.ServerRuntime;
import org.apache.cayenne.exp.Expression;
import org.apache.cayenne.query.ObjectSelect;
import org.apache.cayenne.query.Ordering;
import org.apache.cayenne.query.SelectQuery;
import org.philmaster.boot.model.Client;

/**
 * @author Philmasteryeah
 * 
 *         This class uses the database scheme which is generated by the cayenne
 *         modeler.
 * 
 *         pure jdbc example: JdbcTemplate jdbcTemplate;
 *         jdbcTemplate.update("INSERT INTO car(brand)VALUES(?)", "Honda"));
 * 
 *         orm cayenne example: ObjectContext ctx = dbBean.getContext(); Cars
 *         car = ctx.newObject(Cars.class); car.setName("test car");
 *         ctx.commitChanges();
 *
 */

@Named
@ApplicationScoped
public class DatabaseService {

	private static final String CAYENNE_CONFIG = "cayenne-project.xml";

	private ServerRuntime runtime;

	@PostConstruct
	void init() {
		runtime = ServerRuntime.builder().addConfig(CAYENNE_CONFIG).build(); // db runntime

		// ObjectContext context = BaseContext.getThreadObjectContext(); // session
		// context
	}

	public ObjectContext newContext() {
		return runtime.newContext();
	}

	public DataSource getDataSource() {
		return runtime.getDataSource();
	}

	public static Client fetchClient(ObjectContext objectContext) {
		// TODO String param with nam
		// insert into client (client_id, name) values (1, 'default')
		return clientByName(objectContext, null);
	}

	public static Client clientByName(ObjectContext objectContext, String name) {
		// TODO use name param
		// insert into client (client_id, name) values (1, 'default')
		List<Client> clients = fetchAll(objectContext, Client.class);
		return clients != null && !clients.isEmpty() ? clients.get(0) : null;
	}

	public static <T extends BaseDataObject> T createNew(ObjectContext context, Class<T> clazz) {
		return context.newObject(clazz);
	}

	public static <T extends BaseDataObject> List<T> fetchAll(ObjectContext context, Class<T> clazz) {
		return context.select(SelectQuery.query(clazz));
	}

	public static <T extends BaseDataObject> List<T> fetch(ObjectContext context, Class<T> clazz, Expression where) {
		return ObjectSelect.query(clazz).where(where).select(context);
	}

	public static <T extends BaseDataObject> List<T> fetch(ObjectContext context, Class<T> clazz, Expression where,
			Ordering order) {
		return ObjectSelect.query(clazz).orderBy(order).where(where).select(context);
	}

	//
	// Example:
	// Artist a = ObjectSelect
	// .query(Artist.class)
	// .where(Artist.ARTIST_NAME.eq("Picasso"))
	// .selectOne(context);

	// List<String> names = ObjectSelect
	// .columnQuery(Artist.class, Artist.ARTIST_NAME)
	// .where(Artist.ARTIST_NAME.length().gt(6))
	// .select(context);

}
